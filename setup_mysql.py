#!/usr/bin/env python
"""
Script de configuration MySQL pour l'application Django
Ce script installe MySQL, configure la base de donn√©es et r√©sout les probl√®mes de migration
"""

import os
import sys
import subprocess
import django
from pathlib import Path
import time

def print_header(title):
    """Afficher un en-t√™te format√©"""
    print("\n" + "="*70)
    print(f"üîß {title}")
    print("="*70)

def run_command(command, description, ignore_errors=False):
    """Ex√©cuter une commande et afficher le r√©sultat"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {description} - Succ√®s")
            if result.stdout.strip():
                # Afficher les derni√®res lignes importantes
                lines = result.stdout.strip().split('\n')
                for line in lines[-3:]:
                    if line.strip() and not line.startswith('WARNING'):
                        print(f"   {line}")
            return True
        else:
            if ignore_errors:
                print(f"‚ö†Ô∏è  {description} - Ignor√©")
                return True
            print(f"‚ùå {description} - Erreur")
            if result.stderr.strip():
                print(f"   Erreur: {result.stderr.strip()}")
            return False
    except Exception as e:
        print(f"‚ùå {description} - Exception: {e}")
        return False

def install_mysql_dependencies():
    """Installer les d√©pendances MySQL"""
    print_header("INSTALLATION DES D√âPENDANCES MYSQL")
    
    print("üì¶ Installation de mysqlclient...")
    print("   Note: Cela peut prendre quelques minutes...")
    
    # Essayer diff√©rentes m√©thodes d'installation
    methods = [
        "py -m pip install mysqlclient",
        "py -m pip install --only-binary=all mysqlclient",
        "py -m pip install --upgrade pip setuptools wheel && py -m pip install mysqlclient",
    ]
    
    for method in methods:
        print(f"\nüîÑ Tentative: {method}")
        if run_command(method, "Installation mysqlclient", ignore_errors=True):
            break
        print("   √âchec, tentative suivante...")
    
    # Installer les autres d√©pendances
    other_deps = [
        "Django==4.2.7",
        "python-decouple",
        "Pillow"
    ]
    
    for dep in other_deps:
        run_command(f"py -m pip install {dep}", f"Installation {dep}")
    
    return True

def check_mysql_server():
    """V√©rifier si MySQL est install√© et d√©marr√©"""
    print_header("V√âRIFICATION DU SERVEUR MYSQL")
    
    # V√©rifier si MySQL est install√©
    mysql_paths = [
        "C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin\\mysql.exe",
        "C:\\Program Files\\MySQL\\MySQL Server 5.7\\bin\\mysql.exe",
        "C:\\xampp\\mysql\\bin\\mysql.exe",
        "C:\\wamp64\\bin\\mysql\\mysql8.0.31\\bin\\mysql.exe",
        "mysql"  # Si dans le PATH
    ]
    
    mysql_found = False
    mysql_path = None
    
    for path in mysql_paths:
        if path == "mysql":
            # Tester si mysql est dans le PATH
            result = subprocess.run("mysql --version", shell=True, capture_output=True, text=True)
            if result.returncode == 0:
                mysql_found = True
                mysql_path = "mysql"
                print(f"‚úÖ MySQL trouv√© dans le PATH")
                print(f"   Version: {result.stdout.strip()}")
                break
        else:
            if Path(path).exists():
                mysql_found = True
                mysql_path = path
                print(f"‚úÖ MySQL trouv√©: {path}")
                break
    
    if not mysql_found:
        print("‚ùå MySQL non trouv√© sur le syst√®me")
        print("\nüí° Options pour installer MySQL:")
        print("   1. T√©l√©charger MySQL Community Server: https://dev.mysql.com/downloads/mysql/")
        print("   2. Installer XAMPP: https://www.apachefriends.org/")
        print("   3. Installer WAMP: https://www.wampserver.com/")
        
        choice = input("\nVoulez-vous continuer avec une installation automatique de MySQL ? (o/N): ").lower()
        if choice in ['o', 'oui', 'y', 'yes']:
            return install_mysql_automatically()
        else:
            return False
    
    return True, mysql_path

def install_mysql_automatically():
    """Installer MySQL automatiquement via Chocolatey"""
    print_header("INSTALLATION AUTOMATIQUE DE MYSQL")
    
    print("üç´ Installation via Chocolatey...")
    print("   Note: Cela n√©cessite des privil√®ges administrateur")
    
    # V√©rifier si Chocolatey est install√©
    choco_result = subprocess.run("choco --version", shell=True, capture_output=True, text=True)
    
    if choco_result.returncode != 0:
        print("‚ùå Chocolatey non install√©")
        print("\nüí° Pour installer Chocolatey (en tant qu'administrateur):")
        print('   Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString("https://community.chocolatey.org/install.ps1"))')
        return False
    
    # Installer MySQL via Chocolatey
    if run_command("choco install mysql -y", "Installation MySQL via Chocolatey"):
        print("‚úÖ MySQL install√© avec succ√®s")
        print("‚ö†Ô∏è  Red√©marrez votre ordinateur pour finaliser l'installation")
        return True
    
    return False

def create_mysql_database():
    """Cr√©er la base de donn√©es MySQL"""
    print_header("CR√âATION DE LA BASE DE DONN√âES MYSQL")
    
    print("üóÑÔ∏è  Cr√©ation de la base de donn√©es 'gestion_alertes_db'...")
    
    # Script SQL pour cr√©er la base de donn√©es
    sql_commands = [
        "CREATE DATABASE IF NOT EXISTS gestion_alertes_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;",
        "CREATE USER IF NOT EXISTS 'django_user'@'localhost' IDENTIFIED BY 'django_password';",
        "GRANT ALL PRIVILEGES ON gestion_alertes_db.* TO 'django_user'@'localhost';",
        "FLUSH PRIVILEGES;"
    ]
    
    # Essayer de se connecter avec diff√©rents utilisateurs
    mysql_users = [
        ("root", ""),
        ("root", "root"),
        ("root", "password"),
        ("", "")
    ]
    
    for user, password in mysql_users:
        print(f"\nüîë Tentative de connexion avec utilisateur: {user or 'anonymous'}")
        
        for sql_command in sql_commands:
            if password:
                cmd = f'mysql -u {user} -p{password} -e "{sql_command}"'
            else:
                cmd = f'mysql -u {user} -e "{sql_command}"'
            
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            if result.returncode != 0:
                if "Access denied" in result.stderr:
                    print(f"   ‚ùå Acc√®s refus√© pour {user}")
                    break
                else:
                    print(f"   ‚ö†Ô∏è  Erreur SQL: {result.stderr.strip()}")
            else:
                print(f"   ‚úÖ Commande SQL ex√©cut√©e: {sql_command[:50]}...")
        else:
            # Si toutes les commandes ont r√©ussi
            print(f"‚úÖ Base de donn√©es cr√©√©e avec l'utilisateur {user}")
            
            # Mettre √† jour settings.py avec les bonnes informations
            update_database_settings(user, password)
            return True
    
    print("‚ùå Impossible de cr√©er la base de donn√©es automatiquement")
    print("\nüí° Cr√©ez manuellement la base de donn√©es:")
    print("   1. Ouvrez MySQL Command Line Client")
    print("   2. Ex√©cutez: CREATE DATABASE gestion_alertes_db;")
    print("   3. Modifiez les param√®tres dans settings.py")
    
    return False

def update_database_settings(user, password):
    """Mettre √† jour les param√®tres de base de donn√©es dans settings.py"""
    print(f"üîß Mise √† jour des param√®tres de connexion...")
    
    settings_path = Path("mon_projet/settings.py")
    if not settings_path.exists():
        print("‚ùå Fichier settings.py non trouv√©")
        return False
    
    # Lire le fichier settings.py
    with open(settings_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Remplacer les param√®tres de base de donn√©es
    old_user_line = "'USER': 'root',"
    new_user_line = f"'USER': '{user}',"
    content = content.replace(old_user_line, new_user_line)
    
    old_password_line = "'PASSWORD': '',"
    new_password_line = f"'PASSWORD': '{password}',"
    content = content.replace(old_password_line, new_password_line)
    
    # √âcrire le fichier modifi√©
    with open(settings_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"‚úÖ Param√®tres mis √† jour: USER={user}, PASSWORD={'***' if password else '(vide)'}")
    return True

def reset_migrations():
    """R√©initialiser les migrations"""
    print_header("R√âINITIALISATION DES MIGRATIONS")
    
    # Supprimer les anciens fichiers de migration
    migration_dirs = [
        "apps/authentication/migrations",
        "apps/alertes/migrations",
        "apps/dashboard/migrations"
    ]
    
    for migration_dir in migration_dirs:
        migration_path = Path(migration_dir)
        if migration_path.exists():
            print(f"üóëÔ∏è  Nettoyage des migrations: {migration_dir}")
            for file in migration_path.glob("*.py"):
                if file.name != "__init__.py":
                    file.unlink()
                    print(f"   Supprim√©: {file.name}")
    
    # Supprimer l'ancienne base SQLite si elle existe
    sqlite_db = Path("db.sqlite3")
    if sqlite_db.exists():
        sqlite_db.unlink()
        print("üóëÔ∏è  Ancienne base SQLite supprim√©e")
    
    return True

def create_migrations():
    """Cr√©er les nouvelles migrations"""
    print_header("CR√âATION DES MIGRATIONS")
    
    # Cr√©er les migrations pour chaque app
    apps = ["authentication", "alertes", "dashboard"]
    
    for app in apps:
        if run_command(f"py manage.py makemigrations {app}", f"Migrations pour {app}"):
            print(f"‚úÖ Migrations cr√©√©es pour {app}")
        else:
            print(f"‚ö†Ô∏è  Probl√®me avec les migrations de {app}")
    
    # Cr√©er les migrations g√©n√©rales
    run_command("py manage.py makemigrations", "Migrations g√©n√©rales")
    
    return True

def apply_migrations():
    """Appliquer les migrations"""
    print_header("APPLICATION DES MIGRATIONS")
    
    # Appliquer les migrations
    if run_command("py manage.py migrate", "Application des migrations"):
        print("‚úÖ Toutes les migrations appliqu√©es avec succ√®s")
        return True
    else:
        print("‚ùå Erreur lors de l'application des migrations")
        return False

def create_superuser():
    """Cr√©er un superutilisateur"""
    print_header("CR√âATION DU SUPERUTILISATEUR")
    
    try:
        # Configuration Django
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mon_projet.settings')
        django.setup()
        
        from django.contrib.auth import get_user_model
        User = get_user_model()
        
        # V√©rifier si un superutilisateur existe d√©j√†
        if User.objects.filter(is_superuser=True).exists():
            print("‚úÖ Un superutilisateur existe d√©j√†")
            return True
        
        # Cr√©er un superutilisateur par d√©faut
        admin_user = User.objects.create_user(
            username='admin',
            email='admin@example.com',
            password='admin123',
            role='admin',
            is_staff=True,
            is_superuser=True
        )
        
        print("‚úÖ Superutilisateur cr√©√© avec succ√®s!")
        print("   üë§ Nom d'utilisateur: admin")
        print("   üîë Mot de passe: admin123")
        print("   üìß Email: admin@example.com")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation du superutilisateur: {e}")
        print("\nüí° Cr√©ez manuellement avec: py manage.py createsuperuser")
        return False

def test_mysql_connection():
    """Tester la connexion MySQL"""
    print_header("TEST DE LA CONNEXION MYSQL")
    
    try:
        # Configuration Django
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mon_projet.settings')
        django.setup()
        
        from django.db import connection
        
        with connection.cursor() as cursor:
            cursor.execute("SELECT VERSION()")
            version = cursor.fetchone()
            
        print(f"‚úÖ Connexion MySQL r√©ussie!")
        print(f"   Version MySQL: {version[0]}")
        
        # Tester les mod√®les
        from django.contrib.auth import get_user_model
        from apps.alertes.models import Alerte
        
        User = get_user_model()
        users_count = User.objects.count()
        alertes_count = Alerte.objects.count()
        
        print(f"   Utilisateurs: {users_count}")
        print(f"   Alertes: {alertes_count}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur de connexion MySQL: {e}")
        return False

def main():
    """Fonction principale"""
    print("="*70)
    print("üê¨ CONFIGURATION MYSQL - APPLICATION GESTION DES ALERTES")
    print("="*70)
    
    # V√©rifications pr√©liminaires
    if not Path('manage.py').exists():
        print("‚ùå Fichier manage.py non trouv√©. √ätes-vous dans le bon r√©pertoire ?")
        input("Appuyez sur Entr√©e pour quitter...")
        return
    
    print("‚úÖ Configuration pour MySQL")
    print("‚úÖ Utilisation de 'py' au lieu de 'python'")
    
    # √âtapes de configuration
    steps = [
        ("Installation des d√©pendances MySQL", install_mysql_dependencies),
        ("V√©rification du serveur MySQL", check_mysql_server),
        ("Cr√©ation de la base de donn√©es", create_mysql_database),
        ("R√©initialisation des migrations", reset_migrations),
        ("Cr√©ation des nouvelles migrations", create_migrations),
        ("Application des migrations", apply_migrations),
        ("Cr√©ation du superutilisateur", create_superuser),
        ("Test de la connexion MySQL", test_mysql_connection),
    ]
    
    results = []
    for step_name, step_func in steps:
        try:
            if step_name == "V√©rification du serveur MySQL":
                result = step_func()
                if isinstance(result, tuple):
                    result = result[0]
            else:
                result = step_func()
            results.append((step_name, result))
            
            if not result and step_name in ["V√©rification du serveur MySQL", "Cr√©ation de la base de donn√©es"]:
                print(f"\n‚ö†Ô∏è  √âtape critique √©chou√©e: {step_name}")
                print("Impossible de continuer sans MySQL configur√©")
                break
                
        except Exception as e:
            print(f"\n‚ùå Erreur critique √† l'√©tape {step_name}: {e}")
            results.append((step_name, False))
    
    # R√©sum√©
    print_header("R√âSUM√â DE LA CONFIGURATION MYSQL")
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for step_name, result in results:
        status = "‚úÖ SUCC√àS" if result else "‚ùå √âCHEC"
        print(f"{step_name:<45} {status}")
    
    print(f"\nüéØ R√©sultat: {passed}/{total} √©tapes r√©ussies")
    
    if passed >= 6:  # Au moins 6 √©tapes sur 8
        print("\nüéâ CONFIGURATION MYSQL R√âUSSIE!")
        print("\nüìã Informations de connexion:")
        print("   üë§ Admin: admin / admin123")
        print("   üóÑÔ∏è  Base de donn√©es: gestion_alertes_db")
        print("   üîó MySQL: localhost:3306")
        
        print("\nüåê URLs importantes:")
        print("   üè† Accueil: http://127.0.0.1:8000/")
        print("   üîê Connexion: http://127.0.0.1:8000/auth/login/")
        print("   ‚öôÔ∏è  Admin: http://127.0.0.1:8000/admin/")
        
        # Proposer de d√©marrer le serveur
        response = input("\nüöÄ Voulez-vous d√©marrer le serveur maintenant ? (o/N): ").lower()
        if response in ['o', 'oui', 'y', 'yes']:
            print("\nüöÄ D√©marrage du serveur...")
            print("üì± Application accessible sur: http://127.0.0.1:8000/")
            print("‚èπÔ∏è  Appuyez sur Ctrl+C pour arr√™ter")
            print("="*70)
            try:
                subprocess.run(['py', 'manage.py', 'runserver'], check=True)
            except KeyboardInterrupt:
                print("\n‚èπÔ∏è  Serveur arr√™t√©")
        else:
            print("\n‚úÖ Configuration MySQL termin√©e!")
            print("Pour d√©marrer le serveur: py manage.py runserver")
    else:
        print("\n‚ö†Ô∏è  CONFIGURATION INCOMPL√àTE")
        print("Certaines √©tapes ont √©chou√©. V√©rifiez les erreurs ci-dessus.")
        print("\nüí° Solutions possibles:")
        print("   1. Installer MySQL manuellement")
        print("   2. V√©rifier les param√®tres de connexion")
        print("   3. Utiliser SQLite temporairement")
    
    input("\nAppuyez sur Entr√©e pour quitter...")

if __name__ == "__main__":
    main()