#!/usr/bin/env python
"""
Script de v√©rification de l'application Django de gestion des alertes
Ce script v√©rifie que tous les composants sont correctement connect√©s
"""

import os
import sys
import django
from pathlib import Path

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mon_projet.settings')
django.setup()

def check_models():
    """V√©rifier les mod√®les"""
    print("üîç V√©rification des mod√®les...")
    
    try:
        from apps.authentication.models import CustomUser
        from apps.alertes.models import Alerte, HistoriqueAlerte, StockDebord
        
        print("‚úÖ Mod√®le CustomUser import√© avec succ√®s")
        print("‚úÖ Mod√®le Alerte import√© avec succ√®s")
        print("‚úÖ Mod√®le HistoriqueAlerte import√© avec succ√®s")
        print("‚úÖ Mod√®le StockDebord import√© avec succ√®s")
        
        # V√©rifier les choix des mod√®les
        print(f"   - R√¥les utilisateur: {CustomUser.ROLE_CHOICES}")
        print(f"   - Statuts alerte: {Alerte.STATUS_CHOICES}")
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de l'importation des mod√®les: {e}")
        return False

def check_views():
    """V√©rifier les vues"""
    print("\nüîç V√©rification des vues...")
    
    try:
        from apps.authentication.views import register_view
        from apps.alertes.views import create_alerte, list_alertes, update_statut
        from apps.dashboard.views import dashboard_view
        
        print("‚úÖ Vues d'authentification import√©es avec succ√®s")
        print("‚úÖ Vues d'alertes import√©es avec succ√®s")
        print("‚úÖ Vues de dashboard import√©es avec succ√®s")
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de l'importation des vues: {e}")
        return False

def check_forms():
    """V√©rifier les formulaires"""
    print("\nüîç V√©rification des formulaires...")
    
    try:
        from apps.authentication.forms import CustomUserCreationForm
        from apps.alertes.forms import AlerteForm
        
        print("‚úÖ Formulaires d'authentification import√©s avec succ√®s")
        print("‚úÖ Formulaires d'alertes import√©s avec succ√®s")
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de l'importation des formulaires: {e}")
        return False

def check_urls():
    """V√©rifier la configuration des URLs"""
    print("\nüîç V√©rification des URLs...")
    
    try:
        from django.urls import reverse
        from django.test import Client
        
        # Tester les URLs principales
        urls_to_test = [
            ('dashboard', 'Dashboard'),
            ('login', 'Connexion'),
            ('register', 'Inscription'),
            ('create_alerte', 'Cr√©ation alerte'),
            ('list_alertes', 'Liste alertes'),
        ]
        
        for url_name, description in urls_to_test:
            try:
                url = reverse(url_name)
                print(f"‚úÖ URL '{url_name}' ({description}): {url}")
            except Exception as e:
                print(f"‚ùå Erreur URL '{url_name}': {e}")
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification des URLs: {e}")
        return False

def check_templates():
    """V√©rifier les templates"""
    print("\nüîç V√©rification des templates...")
    
    templates_to_check = [
        'base.html',
        'registration/login.html',
        'registration/register.html',
        'dashboard/dashboard.html',
        'alertes/create_alert.html',
        'alertes/list_alerts.html',
    ]
    
    template_dir = Path('templates')
    all_exist = True
    
    for template in templates_to_check:
        template_path = template_dir / template
        if template_path.exists():
            print(f"‚úÖ Template trouv√©: {template}")
        else:
            print(f"‚ùå Template manquant: {template}")
            all_exist = False
    
    return all_exist

def check_static_files():
    """V√©rifier les fichiers statiques"""
    print("\nüîç V√©rification des fichiers statiques...")
    
    static_files_to_check = [
        'static/css/style.css',
        'static/js/main.js',
    ]
    
    all_exist = True
    
    for static_file in static_files_to_check:
        static_path = Path(static_file)
        if static_path.exists():
            print(f"‚úÖ Fichier statique trouv√©: {static_file}")
        else:
            print(f"‚ùå Fichier statique manquant: {static_file}")
            all_exist = False
    
    return all_exist

def check_settings():
    """V√©rifier la configuration"""
    print("\nüîç V√©rification de la configuration...")
    
    try:
        from django.conf import settings
        
        # V√©rifier les applications install√©es
        required_apps = [
            'apps.authentication',
            'apps.alertes',
            'apps.dashboard',
        ]
        
        for app in required_apps:
            if app in settings.INSTALLED_APPS:
                print(f"‚úÖ Application install√©e: {app}")
            else:
                print(f"‚ùå Application manquante: {app}")
        
        # V√©rifier la configuration de la base de donn√©es
        db_config = settings.DATABASES['default']
        print(f"‚úÖ Base de donn√©es configur√©e: {db_config['ENGINE']}")
        print(f"   - Nom: {db_config['NAME']}")
        print(f"   - Host: {db_config['HOST']}")
        
        # V√©rifier le mod√®le utilisateur personnalis√©
        if hasattr(settings, 'AUTH_USER_MODEL'):
            print(f"‚úÖ Mod√®le utilisateur personnalis√©: {settings.AUTH_USER_MODEL}")
        else:
            print("‚ùå Mod√®le utilisateur personnalis√© non configur√©")
        
        # V√©rifier les URLs de redirection
        print(f"‚úÖ LOGIN_URL: {settings.LOGIN_URL}")
        print(f"‚úÖ LOGIN_REDIRECT_URL: {settings.LOGIN_REDIRECT_URL}")
        print(f"‚úÖ LOGOUT_REDIRECT_URL: {settings.LOGOUT_REDIRECT_URL}")
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification de la configuration: {e}")
        return False

def check_database_connection():
    """V√©rifier la connexion √† la base de donn√©es"""
    print("\nüîç V√©rification de la connexion √† la base de donn√©es...")
    
    try:
        from django.db import connection
        
        with connection.cursor() as cursor:
            cursor.execute("SELECT 1")
            result = cursor.fetchone()
            
        if result:
            print("‚úÖ Connexion √† la base de donn√©es r√©ussie")
            return True
        else:
            print("‚ùå Probl√®me de connexion √† la base de donn√©es")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur de connexion √† la base de donn√©es: {e}")
        print("   Note: Assurez-vous que MySQL est d√©marr√© et que les param√®tres sont corrects")
        return False

def main():
    """Fonction principale de v√©rification"""
    print("=" * 60)
    print("üöÄ V√âRIFICATION DE L'APPLICATION DJANGO - GESTION DES ALERTES")
    print("=" * 60)
    
    checks = [
        check_settings,
        check_models,
        check_views,
        check_forms,
        check_urls,
        check_templates,
        check_static_files,
        check_database_connection,
    ]
    
    results = []
    for check in checks:
        try:
            result = check()
            results.append(result)
        except Exception as e:
            print(f"‚ùå Erreur lors de la v√©rification: {e}")
            results.append(False)
    
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DE LA V√âRIFICATION")
    print("=" * 60)
    
    passed = sum(results)
    total = len(results)
    
    if passed == total:
        print(f"üéâ SUCC√àS: Tous les tests sont pass√©s ({passed}/{total})")
        print("\n‚úÖ Votre application Django est correctement configur√©e!")
        print("\nüöÄ Pour d√©marrer l'application:")
        print("   1. python manage.py makemigrations")
        print("   2. python manage.py migrate")
        print("   3. python manage.py createsuperuser")
        print("   4. python manage.py runserver")
    else:
        print(f"‚ö†Ô∏è  ATTENTION: {total - passed} test(s) ont √©chou√© ({passed}/{total})")
        print("\nüîß Veuillez corriger les erreurs mentionn√©es ci-dessus")
    
    print("\n" + "=" * 60)

if __name__ == "__main__":
    main()