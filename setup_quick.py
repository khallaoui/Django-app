#!/usr/bin/env python
"""
Script de configuration rapide pour Windows
R√©sout les probl√®mes de pip et de base de donn√©es
"""

import os
import sys
import subprocess
import django
from pathlib import Path

def print_header(title):
    """Afficher un en-t√™te format√©"""
    print("\n" + "="*60)
    print(f"üîß {title}")
    print("="*60)

def run_py_command(command, description):
    """Ex√©cuter une commande avec 'py' au lieu de 'python'"""
    print(f"üîÑ {description}...")
    try:
        # Utiliser 'py' qui fonctionne sur votre syst√®me
        full_command = f"py {command}"
        result = subprocess.run(full_command, shell=True, capture_output=True, text=True)
        
        if result.returncode == 0:
            print(f"‚úÖ {description} - Succ√®s")
            if result.stdout.strip():
                # Afficher seulement les lignes importantes
                lines = result.stdout.strip().split('\n')
                for line in lines[-5:]:  # Derni√®res 5 lignes
                    if line.strip():
                        print(f"   {line}")
            return True
        else:
            print(f"‚ùå {description} - Erreur")
            if result.stderr.strip():
                print(f"   Erreur: {result.stderr.strip()}")
            return False
    except Exception as e:
        print(f"‚ùå {description} - Exception: {e}")
        return False

def install_dependencies():
    """Installer les d√©pendances avec py -m pip"""
    print_header("INSTALLATION DES D√âPENDANCES")
    
    # Essayer diff√©rentes m√©thodes d'installation
    methods = [
        ("py -m pip install -r requirements.txt", "Installation avec py -m pip"),
        ("py -m pip install Django==4.2.7", "Installation Django seul"),
        ("py -m pip install python-decouple", "Installation python-decouple"),
        ("py -m pip install Pillow", "Installation Pillow"),
    ]
    
    for command, description in methods:
        print(f"\nüîÑ {description}...")
        try:
            result = subprocess.run(command, shell=True, capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ {description} - Succ√®s")
                return True
            else:
                print(f"‚ö†Ô∏è  {description} - Probl√®me, essai suivant...")
                if "already satisfied" in result.stdout.lower():
                    print("   (D√©j√† install√©)")
                    return True
        except Exception as e:
            print(f"‚ö†Ô∏è  {description} - Exception: {e}")
    
    print("‚ùå Impossible d'installer les d√©pendances automatiquement")
    print("üí° Essayez manuellement :")
    print("   py -m pip install Django")
    return False

def setup_database():
    """Configurer la base de donn√©es SQLite"""
    print_header("CONFIGURATION DE LA BASE DE DONN√âES")
    
    # Supprimer l'ancienne base de donn√©es s'il y a des probl√®mes
    db_file = Path('db.sqlite3')
    if db_file.exists():
        print("üóëÔ∏è  Suppression de l'ancienne base de donn√©es...")
        db_file.unlink()
    
    # Cr√©er les migrations
    if not run_py_command("manage.py makemigrations", "Cr√©ation des migrations"):
        print("‚ö†Ô∏è  Probl√®me avec makemigrations, on continue...")
    
    # Appliquer les migrations
    if not run_py_command("manage.py migrate", "Application des migrations"):
        print("‚ùå √âchec des migrations")
        return False
    
    print("‚úÖ Base de donn√©es SQLite configur√©e avec succ√®s!")
    return True

def create_superuser_auto():
    """Cr√©er un superutilisateur automatiquement"""
    print_header("CR√âATION D'UN COMPTE ADMINISTRATEUR")
    
    try:
        # Configuration Django
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mon_projet.settings')
        django.setup()
        
        from django.contrib.auth import get_user_model
        User = get_user_model()
        
        # V√©rifier si un superutilisateur existe d√©j√†
        if User.objects.filter(is_superuser=True).exists():
            print("‚úÖ Un superutilisateur existe d√©j√†")
            return True
        
        # Cr√©er un superutilisateur par d√©faut
        admin_user = User.objects.create_user(
            username='admin',
            email='admin@example.com',
            password='admin123',
            role='admin',
            is_staff=True,
            is_superuser=True
        )
        
        print("‚úÖ Superutilisateur cr√©√© avec succ√®s!")
        print("   üë§ Nom d'utilisateur: admin")
        print("   üîë Mot de passe: admin123")
        print("   üìß Email: admin@example.com")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation du superutilisateur: {e}")
        return False

def create_sample_data():
    """Cr√©er des donn√©es d'exemple"""
    print_header("CR√âATION DE DONN√âES D'EXEMPLE")
    
    try:
        # Configuration Django
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mon_projet.settings')
        django.setup()
        
        from django.contrib.auth import get_user_model
        from apps.alertes.models import Alerte, HistoriqueAlerte
        
        User = get_user_model()
        
        # Cr√©er des utilisateurs d'exemple
        users_data = [
            {'username': 'agent_kit', 'email': 'kit@example.com', 'role': 'agent_kit', 'password': 'demo123'},
            {'username': 'agent_cross', 'email': 'cross@example.com', 'role': 'agent_cross', 'password': 'demo123'},
            {'username': 'agent_debord', 'email': 'debord@example.com', 'role': 'agent_debord', 'password': 'demo123'},
        ]
        
        created_users = []
        for user_data in users_data:
            user, created = User.objects.get_or_create(
                username=user_data['username'],
                defaults={
                    'email': user_data['email'],
                    'role': user_data['role'],
                    'is_active': True
                }
            )
            if created:
                user.set_password(user_data['password'])
                user.save()
                created_users.append(user)
                print(f"   ‚úÖ Utilisateur cr√©√©: {user.username} ({user.get_role_display()})")
        
        # Cr√©er des alertes d'exemple
        if created_users or User.objects.filter(role='agent_kit').exists():
            creator = created_users[0] if created_users else User.objects.filter(role='agent_kit').first()
            
            alertes_data = [
                {'reference': 'ALT-001', 'zone_kit': 'zone_1', 'nombre_bacs': 15, 'statut': 'en_cours'},
                {'reference': 'ALT-002', 'zone_kit': 'zone_2', 'nombre_bacs': 8, 'statut': 'livre'},
                {'reference': 'ALT-003', 'zone_kit': 'zone_3', 'nombre_bacs': 3, 'statut': 'flc'},
                {'reference': 'ALT-004', 'zone_kit': 'zone_1', 'nombre_bacs': 12, 'statut': 'en_cours'},
                {'reference': 'ALT-005', 'zone_kit': 'zone_4', 'nombre_bacs': 6, 'statut': 'cloture'},
            ]
            
            for alerte_data in alertes_data:
                alerte, created = Alerte.objects.get_or_create(
                    reference=alerte_data['reference'],
                    defaults={
                        'zone_kit': alerte_data['zone_kit'],
                        'nombre_bacs': alerte_data['nombre_bacs'],
                        'statut': alerte_data['statut'],
                        'createur': creator,
                        'commentaires': f'Alerte d\'exemple pour {alerte_data["zone_kit"]}'
                    }
                )
                if created:
                    print(f"   ‚úÖ Alerte cr√©√©e: {alerte.reference} - {alerte.zone_kit}")
                    
                    # Cr√©er l'historique
                    HistoriqueAlerte.objects.create(
                        alerte=alerte,
                        action="Cr√©ation de l'alerte d'exemple",
                        utilisateur=creator,
                        nouveau_statut=alerte.statut
                    )
        
        print("‚úÖ Donn√©es d'exemple cr√©√©es avec succ√®s!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des donn√©es d'exemple: {e}")
        return False

def test_application():
    """Tester que l'application fonctionne"""
    print_header("TEST DE L'APPLICATION")
    
    try:
        # Configuration Django
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mon_projet.settings')
        django.setup()
        
        from django.contrib.auth import get_user_model
        from apps.alertes.models import Alerte
        
        User = get_user_model()
        
        # Compter les √©l√©ments
        users_count = User.objects.count()
        alertes_count = Alerte.objects.count()
        
        print(f"‚úÖ Utilisateurs dans la base: {users_count}")
        print(f"‚úÖ Alertes dans la base: {alertes_count}")
        
        # Tester l'importation des vues
        from apps.dashboard.views import dashboard_view
        from apps.alertes.views import create_alerte, list_alertes
        from apps.authentication.views import register_view
        
        print("‚úÖ Toutes les vues sont importables")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        return False

def start_server():
    """D√©marrer le serveur"""
    print_header("D√âMARRAGE DU SERVEUR")
    
    print("üöÄ D√©marrage du serveur Django...")
    print("üì± L'application sera accessible √†: http://127.0.0.1:8000/")
    print("üîë Administration: http://127.0.0.1:8000/admin/")
    print("‚èπÔ∏è  Appuyez sur Ctrl+C pour arr√™ter le serveur")
    print("\n" + "="*60)
    
    try:
        subprocess.run(['py', 'manage.py', 'runserver'], check=True)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Serveur arr√™t√© par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur lors du d√©marrage du serveur: {e}")

def main():
    """Fonction principale"""
    print("="*70)
    print("üöÄ CONFIGURATION RAPIDE - APPLICATION GESTION DES ALERTES")
    print("   (Version Windows - R√©solution des probl√®mes)")
    print("="*70)
    
    # V√©rifications pr√©liminaires
    if not Path('manage.py').exists():
        print("‚ùå Fichier manage.py non trouv√©. √ätes-vous dans le bon r√©pertoire ?")
        input("Appuyez sur Entr√©e pour quitter...")
        return
    
    print("‚úÖ Python d√©tect√©, utilisation de 'py' au lieu de 'python'")
    print("‚úÖ Configuration SQLite au lieu de MySQL")
    
    # √âtapes de configuration
    steps = [
        ("Installation des d√©pendances", install_dependencies),
        ("Configuration de la base de donn√©es", setup_database),
        ("Cr√©ation du compte administrateur", create_superuser_auto),
        ("Cr√©ation de donn√©es d'exemple", create_sample_data),
        ("Test de l'application", test_application),
    ]
    
    results = []
    for step_name, step_func in steps:
        try:
            result = step_func()
            results.append((step_name, result))
            if not result:
                print(f"\n‚ö†Ô∏è  Probl√®me √† l'√©tape: {step_name}")
                print("On continue quand m√™me...")
        except Exception as e:
            print(f"\n‚ùå Erreur critique √† l'√©tape {step_name}: {e}")
            results.append((step_name, False))
    
    # R√©sum√©
    print_header("R√âSUM√â DE LA CONFIGURATION")
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for step_name, result in results:
        status = "‚úÖ SUCC√àS" if result else "‚ùå √âCHEC"
        print(f"{step_name:<40} {status}")
    
    print(f"\nüéØ R√©sultat: {passed}/{total} √©tapes r√©ussies")
    
    if passed >= 3:  # Au moins 3 √©tapes sur 5
        print("\nüéâ CONFIGURATION SUFFISANTE POUR D√âMARRER!")
        print("\nüìã Informations de connexion:")
        print("   üë§ Admin: admin / admin123")
        print("   üë§ Agent Kit: agent_kit / demo123")
        print("   üë§ Agent Cross: agent_cross / demo123")
        print("   üë§ Agent D√©bord: agent_debord / demo123")
        
        print("\nüåê URLs importantes:")
        print("   üè† Accueil: http://127.0.0.1:8000/")
        print("   üîê Connexion: http://127.0.0.1:8000/auth/login/")
        print("   ‚öôÔ∏è  Admin: http://127.0.0.1:8000/admin/")
        
        # Proposer de d√©marrer le serveur
        response = input("\nüöÄ Voulez-vous d√©marrer le serveur maintenant ? (o/N): ").lower()
        if response in ['o', 'oui', 'y', 'yes']:
            start_server()
        else:
            print("\n‚úÖ Configuration termin√©e!")
            print("Pour d√©marrer le serveur plus tard, utilisez:")
            print("   py manage.py runserver")
    else:
        print("\n‚ö†Ô∏è  CONFIGURATION INCOMPL√àTE")
        print("Certaines √©tapes ont √©chou√©, mais vous pouvez essayer de d√©marrer quand m√™me:")
        print("   py manage.py runserver")
    
    input("\nAppuyez sur Entr√©e pour quitter...")

if __name__ == "__main__":
    main()